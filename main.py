from fastapi import FastAPI, File, UploadFile, Form
from fastapi.responses import JSONResponse
import pandas as pd
import io
import matplotlib.pyplot as plt
import seaborn as sns
import base64
import os
import statsmodels.api as sm
from sklearn.metrics import roc_curve, auc
import numpy as np
from scipy import stats

app = FastAPI()

# üé® Estilo Global - Inspirado no Minitab
def aplicar_estilo_minitab():
    plt.style.use("default")
    plt.rcParams.update({
        "figure.facecolor": "white",
        "axes.facecolor": "white",
        "axes.edgecolor": "#333333",
        "axes.labelcolor": "#333333",
        "axes.titleweight": "bold",
        "axes.titlesize": 14,
        "axes.labelsize": 12,
        "xtick.color": "#333333",
        "ytick.color": "#333333",
        "font.family": "Arial",
        "grid.linestyle": "--",
        "grid.color": "#CCCCCC",
        "grid.alpha": 0.7,
        "legend.frameon": False
    })
    plt.grid(True)

# üîç Regress√£o Linear Simples
def analise_regressao_linear_simples(df, colunas):
    X = df[colunas[0]].astype(str).str.strip().str.replace(",", ".").str.replace(r"[^\d\.\-]", "", regex=True)
    Y = df[colunas[1]].astype(str).str.strip().str.replace(",", ".").str.replace(r"[^\d\.\-]", "", regex=True)
    X = pd.to_numeric(X, errors="coerce")
    Y = pd.to_numeric(Y, errors="coerce")
    validos = ~(X.isna() | Y.isna())
    X = X[validos]
    Y = Y[validos]

    if len(X) < 2 or len(Y) < 2:
        raise ValueError("N√£o h√° dados num√©ricos suficientes para a regress√£o.")

    X_const = sm.add_constant(X)
    modelo = sm.OLS(Y, X_const).fit()

    a = modelo.params[0]
    b = modelo.params[1]
    p_valor = modelo.pvalues[1]
    r2 = modelo.rsquared
    r2_ajustado = modelo.rsquared_adj
    erro_padrao = np.sqrt(modelo.mse_resid)

    resumo = f"""
**Equa√ß√£o da reta:**  y = {a:.3f} + {b:.3f}¬∑x  
**Valor-p da inclina√ß√£o:**  {p_valor:.4f}  
**Coeficiente de determina√ß√£o (R¬≤):**  {r2:.4f}  
**R¬≤ ajustado:**  {r2_ajustado:.4f}  
**Erro padr√£o da estimativa:**  {erro_padrao:.4f}
""".strip()

    plt.figure(figsize=(8, 6))
    aplicar_estilo_minitab()
    sns.regplot(x=X, y=Y, ci=None, line_kws={"color": "red"})
    plt.xlabel(colunas[0])
    plt.ylabel(colunas[1])
    plt.title("Regress√£o Linear Simples")

    return resumo, salvar_grafico()

# üîç Regress√£o Linear M√∫ltipla
def analise_regressao_linear_multipla(df, colunas):
    X = df[colunas[:-1]]
    Y = df[colunas[-1]]
    X_const = sm.add_constant(X)
    modelo = sm.OLS(Y, X_const).fit()
    r2 = modelo.rsquared_adj
    p_valor = modelo.f_pvalue
    resumo = f"R¬≤ ajustado = {r2:.3f}, Valor-p global do modelo = {p_valor:.3f}"
    return resumo, None

# üîç Regress√£o Log√≠stica Bin√°ria
def analise_regressao_logistica_binaria(df, colunas):
    X = df[colunas[:-1]]
    y = df[colunas[-1]]
    X_const = sm.add_constant(X)
    modelo = sm.Logit(y, X_const).fit(disp=False)
    y_prob = modelo.predict(X_const)
    fpr, tpr, _ = roc_curve(y, y_prob)
    roc_auc = auc(fpr, tpr)
    p_valor = modelo.llr_pvalue
    resumo = f"AUC da curva ROC = {roc_auc:.2f}, Valor-p global do modelo = {p_valor:.3f}"
    plt.figure(figsize=(8, 6))
    aplicar_estilo_minitab()
    plt.plot(fpr, tpr, label=f'ROC curve (area = {roc_auc:.2f})')
    plt.plot([0, 1], [0, 1], 'k--')
    plt.xlabel('FPR')
    plt.ylabel('TPR')
    plt.title('Curva ROC - Regress√£o Log√≠stica')
    plt.legend()
    return resumo, salvar_grafico()

# üìä Gr√°fico de Dispers√£o
def grafico_dispersao(df, colunas):
    if len(colunas) < 2:
        raise ValueError("Gr√°fico de dispers√£o requer exatamente duas colunas.")
    plt.figure(figsize=(8, 6))
    aplicar_estilo_minitab()
    sns.scatterplot(x=df[colunas[0]], y=df[colunas[1]])
    plt.title("Gr√°fico de Dispers√£o")
    return salvar_grafico()

# üìä Gr√°fico de Boxplot Simples (Y num√©rica)
def grafico_boxplot_simples(df, colunas, coluna_y=None):
    if not coluna_y:
        raise ValueError("Para o boxplot simples, a coluna Y (num√©rica) √© obrigat√≥ria.")

    y = df[coluna_y].astype(str).str.replace(",", ".").str.replace(r"[^\d\.\-]", "", regex=True)
    y = pd.to_numeric(y, errors="coerce").dropna()
    if len(y) < 2:
        raise ValueError("Coluna Y deve conter ao menos dois valores num√©ricos.")

    df_box = pd.DataFrame({coluna_y: y, "grupo": "A"})

    plt.figure(figsize=(6, 6))
    aplicar_estilo_minitab()
    sns.boxplot(data=df_box, x="grupo", y=coluna_y, color="#89CFF0", width=0.3)
    sns.pointplot(data=df_box, x="grupo", y=coluna_y, estimator=np.mean,
                  markers="D", color="red", scale=1.2, errwidth=0)
    plt.xlabel("")
    plt.ylabel(coluna_y)
    plt.title("Boxplot Simples com M√©dia (losango)")
    return salvar_grafico()

def grafico_pareto(df, colunas):
    if len(colunas) != 1:
        raise ValueError("O gr√°fico de Pareto requer exatamente uma coluna categ√≥rica.")

    coluna = colunas[0]
    contagem = df[coluna].value_counts().sort_values(ascending=False)
    porcentagem = contagem / contagem.sum() * 100
    acumulado = porcentagem.cumsum()

    plt.figure(figsize=(10, 6))
    aplicar_estilo_minitab()

    # Barras de frequ√™ncia
    ax = sns.barplot(x=contagem.index, y=contagem.values, color="#89CFF0")
    ax.set_ylabel("Frequ√™ncia")
    ax.set_xlabel(coluna)
    ax.set_title("Gr√°fico de Pareto")

    # Linha acumulada (%)
    ax2 = ax.twinx()
    ax2.plot(contagem.index, acumulado.values, color="red", marker="o", linewidth=2)
    ax2.set_ylabel("Acumulado (%)")
    ax2.set_ylim(0, 110)

    # R√≥tulos no eixo x girados para melhor leitura
    ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha="right")

    return salvar_grafico()

def grafico_boxplot_multiplo(df, colunas, coluna_y=None):
    if not coluna_y or not coluna_y.strip():
        raise ValueError("Voc√™ deve selecionar uma coluna Y com valores num√©ricos para o boxplot m√∫ltiplo.")

    coluna_y = coluna_y.strip()

    # Valida√ß√£o do t√≠tulo da Y
    if coluna_y.startswith("Unnamed") or coluna_y not in df.columns:
        raise ValueError(f"A coluna Y '{coluna_y}' n√£o tem t√≠tulo v√°lido ou n√£o foi encontrada.")

    # Trata Y
    y = df[coluna_y].astype(str).str.replace(",", ".").str.replace(r"[^\d\.\-]", "", regex=True)
    y = pd.to_numeric(y, errors="coerce")
    if y.dropna().shape[0] < 2:
        raise ValueError("A coluna Y deve conter ao menos dois valores num√©ricos v√°lidos.")

    # Trata colunas X (remover Y e Unnamed)
    colunas = [c.strip() for c in colunas if c.strip() and c.strip() != coluna_y and not c.strip().startswith("Unnamed")]

    if not colunas:
        raise ValueError("Nenhuma coluna X v√°lida foi selecionada para o agrupamento.")

    x_col = colunas[0]
    if x_col not in df.columns:
        raise ValueError(f"A coluna X '{x_col}' n√£o foi encontrada no arquivo.")

    grupo = df[x_col].astype(str)
    df_plot = pd.DataFrame({coluna_y: y, x_col: grupo}).dropna()

    if df_plot.empty:
        raise ValueError("Os dados da coluna Y e do grupo X selecionado n√£o t√™m valores v√°lidos simultaneamente.")

    plt.figure(figsize=(10, 6))
    aplicar_estilo_minitab()

    sns.boxplot(data=df_plot, x=x_col, y=coluna_y, color="#89CFF0")
    sns.pointplot(data=df_plot, x=x_col, y=coluna_y, estimator=np.mean,
                  markers="D", color="red", scale=1.1, errwidth=0)

    plt.title(f"Boxplot M√∫ltiplo por '{x_col}'")
    plt.xlabel(x_col)
    plt.ylabel(coluna_y)
    plt.xticks(rotation=45)

    return salvar_grafico()

# üìä Histograma Simples com Curva de Densidade (tipo Gauss)
def grafico_histograma_simples(df, colunas, coluna_y=None):
    if not colunas or len(colunas) == 0:
        raise ValueError("Voc√™ deve selecionar uma coluna Y com dados num√©ricos para o histograma simples.")

    coluna_y = colunas[0]

    y = df[coluna_y].astype(str).str.replace(",", ".").str.replace(r"[^\d\.\-]", "", regex=True)
    y = pd.to_numeric(y, errors="coerce").dropna()

    if len(y) < 2:
        raise ValueError("Coluna Y deve conter ao menos dois valores num√©ricos.")

    plt.figure(figsize=(8, 6))
    sns.histplot(y, kde=True, color="#89CFF0", edgecolor="black")
    plt.xlabel(coluna_y)
    plt.ylabel("Frequ√™ncia")
    plt.title("Histograma Simples com Curva de Densidade")

    return salvar_grafico()

from scipy import stats

def analise_descritiva(df, colunas):
    import matplotlib.pyplot as plt
    import numpy as np
    from scipy import stats
    import base64
    import io

    if len(colunas) != 1:
        raise ValueError("Selecione apenas uma coluna para a An√°lise Descritiva.")

    coluna = colunas[0]
    y = df[coluna].dropna().astype(float)
    n = len(y)

    if n < 3:
        raise ValueError("A amostra precisa ter pelo menos 3 valores num√©ricos.")

    media = np.mean(y)
    mediana = np.median(y)
    moda = stats.mode(y, keepdims=False).mode
    desvio = np.std(y, ddof=1)
    variancia = np.var(y, ddof=1)
    minimo = np.min(y)
    q1 = np.percentile(y, 25)
    q3 = np.percentile(y, 75)
    maximo = np.max(y)
    assimetria = stats.skew(y)
    curtose = stats.kurtosis(y)

    # Intervalos de confian√ßa 95%
    z = 1.96
    erro_media = z * (desvio / np.sqrt(n))
    erro_mediana = 1.57 * (desvio / np.sqrt(n))  # aproxima√ß√£o
    erro_variancia = z * (np.std([np.var(y, ddof=1) for _ in range(1000)], ddof=1))  # bootstrap rudimentar

    # Texto
    texto = f"""
**An√°lise Descritiva da coluna '{coluna}'**
- M√©dia: {media:.4f}
- Mediana: {mediana:.4f}
- Moda: {moda:.4f}
- Desvio Padr√£o: {desvio:.4f}
- Vari√¢ncia: {variancia:.4f}
- M√≠nimo: {minimo:.4f}
- 1¬∫ Quartil: {q1:.4f}
- 3¬∫ Quartil: {q3:.4f}
- M√°ximo: {maximo:.4f}
- Assimetria: {assimetria:.4f}
- Curtose: {curtose:.4f}
- N: {n}
- IC 95% da M√©dia: [{media - erro_media:.4f}, {media + erro_media:.4f}]
- IC 95% da Mediana (aprox): [{mediana - erro_mediana:.4f}, {mediana + erro_mediana:.4f}]
- IC 95% da Vari√¢ncia (estimado): ¬±{erro_variancia:.4f}
"""

    # Boxplot horizontal
    fig, ax = plt.subplots(figsize=(8, 2))
    box = ax.boxplot(y, vert=False, patch_artist=True, boxprops=dict(facecolor='lightblue'))

    # M√©dia como losango
    ax.plot(media, 1, marker='D', color='darkred', label='M√©dia')
    ax.set_title(f"Boxplot Horizontal de {coluna}")
    ax.set_yticklabels([''])

    ax.legend(loc="upper right")
    fig.tight_layout()

    buffer = io.BytesIO()
    plt.savefig(buffer, format="png")
    buffer.seek(0)
    imagem_base64 = base64.b64encode(buffer.read()).decode("utf-8")
    plt.close()

    return texto.strip(), imagem_base64


# üíæ Salvar gr√°fico como imagem base64
def salvar_grafico():
    caminho = "grafico.png"
    plt.tight_layout()
    plt.savefig(caminho)
    plt.close()
    with open(caminho, "rb") as f:
        img_base64 = base64.b64encode(f.read()).decode("utf-8")
    os.remove(caminho)
    return img_base64

# üîó Dicion√°rio de an√°lises dispon√≠veis
ANALISES = {
    "regressao_simples": analise_regressao_linear_simples,
    "regressao_multipla": analise_regressao_linear_multipla,
    "regressao_logistica_binaria": analise_regressao_logistica_binaria,
    "analise_descritiva": analise_descritiva
}

# üîó Dicion√°rio de gr√°ficos dispon√≠veis
GRAFICOS = {
    "scatter": grafico_dispersao,
    "boxplot_simples": grafico_boxplot_simples,
    "grafico_pareto": grafico_pareto,
    "boxplot_multiplo": grafico_boxplot_multiplo,
    "histograma_simples": grafico_histograma_simples,
    "grafico_sumario": grafico_sumario
}

@app.post("/analise")
async def analisar(
    arquivo: UploadFile = File(None),
    ferramenta: str = Form(None),
    grafico: str = Form(None),
    coluna_y: str = Form(None),
    colunas_x: str | list[str] = Form(None)
):
    try:
        def interpretar_coluna(df, valor):
            valor = valor.strip()
            if len(valor) == 1 and valor.upper() in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
                idx = ord(valor.upper()) - ord("A")
                if idx < len(df.columns):
                    return df.columns[idx]
                else:
                    raise ValueError(f"Coluna na posi√ß√£o '{valor}' n√£o existe no arquivo. Arquivo tem apenas {len(df.columns)} colunas.")
            return valor

        # üîÑ Leitura do arquivo Excel
        if arquivo and arquivo.filename.endswith(".xlsx"):
            file_bytes = await arquivo.read()
            df = pd.read_excel(io.BytesIO(file_bytes), engine="openpyxl")
        else:
            return JSONResponse(content={"erro": "Envie um arquivo Excel (.xlsx) v√°lido."}, status_code=400)

        df.columns = df.columns.str.strip()
        colunas_usadas = []

        if coluna_y and coluna_y.strip():
            colunas_usadas.append(interpretar_coluna(df, coluna_y))


        colunas_x_lista = []
        if colunas_x:
            if isinstance(colunas_x, str):
                colunas_x_lista = [x.strip() for x in colunas_x.split(",") if x.strip()]
            elif isinstance(colunas_x, list):
                colunas_x_lista = [x.strip() for x in colunas_x if isinstance(x, str) and x.strip()]

        for c in colunas_x_lista:
            colunas_usadas.append(interpretar_coluna(df, c))

        if not colunas_usadas:
            return JSONResponse(content={"erro": "Informe ao menos coluna_y ou colunas_x."}, status_code=422)

        for col in colunas_usadas:
            if col not in df.columns:
                return JSONResponse(content={"erro": f"Coluna '{col}' n√£o encontrada no arquivo."}, status_code=400)

        resultado_texto = None
        imagem_analise_base64 = None
        imagem_grafico_isolado_base64 = None

        # ‚úÖ Caso 1: an√°lise estat√≠stica (com gr√°fico acoplado, se houver)
        if ferramenta and ferramenta.strip():
            funcao = ANALISES.get(ferramenta.strip())
            if not funcao:
                return JSONResponse(content={"erro": "An√°lise estat√≠stica desconhecida."}, status_code=400)
            resultado_texto, imagem_analise_base64 = funcao(df, colunas_usadas)

        # ‚úÖ Caso 2: gr√°fico isolado (com ou sem an√°lise)
        if grafico and grafico.strip():
            funcao = GRAFICOS.get(grafico.strip())
            if not funcao:
                return JSONResponse(content={"erro": "Gr√°fico desconhecido."}, status_code=400)
            # ‚õëÔ∏è Ajuste: aplica coluna_y para qualquer gr√°fico do tipo boxplot
            if grafico.strip().startswith("boxplot"):
                imagem_grafico_isolado_base64 = funcao(df, colunas_usadas, coluna_y=interpretar_coluna(df, coluna_y))
            else:
                imagem_grafico_isolado_base64 = funcao(df, colunas_usadas)

        if not ferramenta and not grafico:
            return JSONResponse(content={"erro": "Nenhuma ferramenta selecionada."}, status_code=400)

        return {
            "analise": resultado_texto or "",
            "grafico_base64": imagem_analise_base64,
            "grafico_isolado_base64": imagem_grafico_isolado_base64,
            "colunas_utilizadas": colunas_usadas
        }

    except ValueError as e:
        return JSONResponse(content={"erro": str(e)}, status_code=400)
    except Exception as e:
        return JSONResponse(content={"erro": "Erro interno ao processar a an√°lise.", "detalhe": str(e)}, status_code=500)







